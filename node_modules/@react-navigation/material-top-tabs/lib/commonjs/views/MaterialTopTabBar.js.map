{"version":3,"sources":["MaterialTopTabBar.tsx"],"names":["TabBarTop","props","colors","state","navigation","descriptors","activeTintColor","text","inactiveTintColor","alpha","rgb","string","allowFontScaling","showIcon","showLabel","pressColor","iconStyle","labelStyle","indicatorStyle","style","rest","backgroundColor","primary","card","route","key","options","tabBarAccessibilityLabel","tabBarTestID","preventDefault","event","emit","type","target","canPreventDefault","defaultPrevented","focused","color","tabBarIcon","undefined","icon","styles","label","tabBarLabel","title","name","StyleSheet","create","height","width","textAlign","textTransform","fontSize","margin"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport { TabBar } from 'react-native-tab-view';\nimport { Route, useTheme } from '@react-navigation/native';\nimport Color from 'color';\n\nimport { MaterialTopTabBarProps } from '../types';\n\nexport default function TabBarTop(props: MaterialTopTabBarProps) {\n  const { colors } = useTheme();\n\n  const {\n    state,\n    navigation,\n    descriptors,\n    activeTintColor = colors.text,\n    inactiveTintColor = Color(activeTintColor)\n      .alpha(0.5)\n      .rgb()\n      .string(),\n    allowFontScaling = true,\n    showIcon = false,\n    showLabel = true,\n    pressColor = Color(activeTintColor)\n      .alpha(0.08)\n      .rgb()\n      .string(),\n    iconStyle,\n    labelStyle,\n    indicatorStyle,\n    style,\n    ...rest\n  } = props;\n\n  return (\n    <TabBar\n      {...rest}\n      navigationState={state}\n      activeColor={activeTintColor}\n      inactiveColor={inactiveTintColor}\n      indicatorStyle={[{ backgroundColor: colors.primary }, indicatorStyle]}\n      style={[{ backgroundColor: colors.card }, style]}\n      pressColor={pressColor}\n      getAccessibilityLabel={({ route }) =>\n        descriptors[route.key].options.tabBarAccessibilityLabel\n      }\n      getTestID={({ route }) => descriptors[route.key].options.tabBarTestID}\n      onTabPress={({ route, preventDefault }) => {\n        const event = navigation.emit({\n          type: 'tabPress',\n          target: route.key,\n          canPreventDefault: true,\n        });\n\n        if (event.defaultPrevented) {\n          preventDefault();\n        }\n      }}\n      onTabLongPress={({ route }) =>\n        navigation.emit({\n          type: 'tabLongPress',\n          target: route.key,\n        })\n      }\n      renderIcon={({ route, focused, color }) => {\n        if (showIcon === false) {\n          return null;\n        }\n\n        const { options } = descriptors[route.key];\n\n        if (options.tabBarIcon !== undefined) {\n          const icon = options.tabBarIcon({ focused, color });\n\n          return <View style={[styles.icon, iconStyle]}>{icon}</View>;\n        }\n\n        return null;\n      }}\n      renderLabel={({ route, focused, color }) => {\n        if (showLabel === false) {\n          return null;\n        }\n\n        const { options } = descriptors[route.key];\n        const label =\n          options.tabBarLabel !== undefined\n            ? options.tabBarLabel\n            : options.title !== undefined\n            ? options.title\n            : (route as Route<string>).name;\n\n        if (typeof label === 'string') {\n          return (\n            <Text\n              style={[styles.label, { color }, labelStyle]}\n              allowFontScaling={allowFontScaling}\n            >\n              {label}\n            </Text>\n          );\n        }\n\n        return label({ focused, color });\n      }}\n    />\n  );\n}\n\nconst styles = StyleSheet.create({\n  icon: {\n    height: 24,\n    width: 24,\n  },\n  label: {\n    textAlign: 'center',\n    textTransform: 'uppercase',\n    fontSize: 13,\n    margin: 4,\n    backgroundColor: 'transparent',\n  },\n});\n"]}