{"version":3,"sources":["MaterialTopTabView.tsx"],"names":["React","TabView","useTheme","TabActions","MaterialTopTabBar","MaterialTopTabView","pager","lazyPlaceholder","tabBar","props","tabBarOptions","state","navigation","descriptors","sceneContainerStyle","rest","colors","renderTabBar","index","dispatch","jumpTo","routes","name","target","key","route","render","emit","type","backgroundColor","background"],"mappings":"smCAAA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CACA,OAASC,OAAT,KAA4C,uBAA5C,CACA,OAASC,QAAT,KAAyB,0BAAzB,CACA,OAA6BC,UAA7B,KAA+C,2BAA/C,CAEA,MAAOC,CAAAA,iBAAP,KAA8B,qBAA9B,CAeA,cAAe,SAASC,CAAAA,kBAAT,MAUL,IATRC,CAAAA,KASQ,MATRA,KASQ,CARRC,eAQQ,MARRA,eAQQ,kBAPRC,MAOQ,CAPRA,MAOQ,sBAPC,SAACC,KAAD,QAAmC,qBAAC,iBAAD,aAAuBA,KAAvB,mDAAnC,EAOD,aANRC,aAMQ,MANRA,aAMQ,CALRC,KAKQ,MALRA,KAKQ,CAJRC,UAIQ,MAJRA,UAIQ,CAHRC,WAGQ,MAHRA,WAGQ,CAFRC,mBAEQ,MAFRA,mBAEQ,CADLC,IACK,4JACWb,QAAQ,EADnB,CACAc,MADA,WACAA,MADA,CAGR,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACR,KAAD,CAA+B,CAClD,MAAOD,CAAAA,MAAM,kBACRE,aADQ,IAERD,KAFQ,EAGXE,KAAK,CAAEA,KAHI,CAIXC,UAAU,CAAEA,UAJD,CAKXC,WAAW,CAAEA,WALF,GAAb,CAOD,CARD,CAUA,MACE,qBAAC,OAAD,aACME,IADN,EAEE,aAAa,CAAE,uBAAAG,KAAK,QAClBN,CAAAA,UAAU,CAACO,QAAX,kBACKhB,UAAU,CAACiB,MAAX,CAAkBT,KAAK,CAACU,MAAN,CAAaH,KAAb,EAAoBI,IAAtC,CADL,EAEEC,MAAM,CAAEZ,KAAK,CAACa,GAFhB,GADkB,EAFtB,CAQE,WAAW,CAAE,+BAAGC,CAAAA,KAAH,OAAGA,KAAH,OAAeZ,CAAAA,WAAW,CAACY,KAAK,CAACD,GAAP,CAAX,CAAuBE,MAAvB,EAAf,EARf,CASE,eAAe,CAAEf,KATnB,CAUE,YAAY,CAAEM,YAVhB,CAWE,WAAW,CAAEX,KAXf,CAYE,qBAAqB,CAAEC,eAZzB,CAaE,YAAY,CAAE,8BAAMK,CAAAA,UAAU,CAACe,IAAX,CAAgB,CAAEC,IAAI,CAAE,YAAR,CAAhB,CAAN,EAbhB,CAcE,UAAU,CAAE,4BAAMhB,CAAAA,UAAU,CAACe,IAAX,CAAgB,CAAEC,IAAI,CAAE,UAAR,CAAhB,CAAN,EAdd,CAeE,mBAAmB,CAAE,CACnB,CAAEC,eAAe,CAAEb,MAAM,CAACc,UAA1B,CADmB,CAEnBhB,mBAFmB,CAfvB,kDADF,CAsBD","sourcesContent":["import * as React from 'react';\nimport { TabView, SceneRendererProps } from 'react-native-tab-view';\nimport { useTheme } from '@react-navigation/native';\nimport { TabNavigationState, TabActions } from '@react-navigation/routers';\n\nimport MaterialTopTabBar from './MaterialTopTabBar';\nimport {\n  MaterialTopTabDescriptorMap,\n  MaterialTopTabNavigationConfig,\n  MaterialTopTabNavigationHelpers,\n  MaterialTopTabBarProps,\n} from '../types';\n\ntype Props = MaterialTopTabNavigationConfig & {\n  state: TabNavigationState;\n  navigation: MaterialTopTabNavigationHelpers;\n  descriptors: MaterialTopTabDescriptorMap;\n  tabBarPosition?: 'top' | 'bottom';\n};\n\nexport default function MaterialTopTabView({\n  pager,\n  lazyPlaceholder,\n  tabBar = (props: MaterialTopTabBarProps) => <MaterialTopTabBar {...props} />,\n  tabBarOptions,\n  state,\n  navigation,\n  descriptors,\n  sceneContainerStyle,\n  ...rest\n}: Props) {\n  const { colors } = useTheme();\n\n  const renderTabBar = (props: SceneRendererProps) => {\n    return tabBar({\n      ...tabBarOptions,\n      ...props,\n      state: state,\n      navigation: navigation,\n      descriptors: descriptors,\n    });\n  };\n\n  return (\n    <TabView\n      {...rest}\n      onIndexChange={index =>\n        navigation.dispatch({\n          ...TabActions.jumpTo(state.routes[index].name),\n          target: state.key,\n        })\n      }\n      renderScene={({ route }) => descriptors[route.key].render()}\n      navigationState={state}\n      renderTabBar={renderTabBar}\n      renderPager={pager}\n      renderLazyPlaceholder={lazyPlaceholder}\n      onSwipeStart={() => navigation.emit({ type: 'swipeStart' })}\n      onSwipeEnd={() => navigation.emit({ type: 'swipeEnd' })}\n      sceneContainerStyle={[\n        { backgroundColor: colors.background },\n        sceneContainerStyle,\n      ]}\n    />\n  );\n}\n"]}